diff --git a/libs/codeintel2/lang_javascript.py b/libs/codeintel2/lang_javascript.py
index 21f9373..7093ee9 100644
--- a/libs/codeintel2/lang_javascript.py
+++ b/libs/codeintel2/lang_javascript.py
@@ -626,12 +626,20 @@ class JavaScriptLangIntel(CitadelLangIntel,
         if extra_dirs:
             log.debug("%s extra lib dirs: %r", self.lang, extra_dirs)
             max_depth = env.get_pref("codeintel_max_recursive_dir_depth", 10)
-            js_assocs = env.assoc_patterns_from_lang(self.lang)
+            js_assocs = env.assoc_patterns_from_lang("JavaScript")
             extra_dirs = tuple(
                 util.gen_dirs_under_dirs(extra_dirs,
                     max_depth=max_depth,
                     interesting_file_patterns=js_assocs)
             )
+
+            # TODO Why doesn't it pick-up the value in the setting file???
+
+            exclude_patterns = env.get_pref("codeintel_scan_exclude_dir", { "JavaScript":["/build/"] }).get(self.lang)
+            if not exclude_patterns is None:
+                for p in exclude_patterns:
+                    extra_dirs = [d for d in extra_dirs if not re.search(p, d)]
+
         else:
             extra_dirs = () # ensure retval is a tuple
         return extra_dirs
@@ -658,6 +666,8 @@ class JavaScriptLangIntel(CitadelLangIntel,
                                   self._invalidate_cache)
             env.add_pref_observer("codeintel_scan_files_in_project",
                                   self._invalidate_cache)
+            env.add_pref_observer("codeintel_scan_exclude_dir",
+                                  self._invalidate_cache)
             # (Bug 68850) Both of these 'live_*' prefs on the *project*
             # prefset can result in a change of project base dir. It is
             # possible that we can get false positives here if there is ever
@@ -2456,7 +2466,7 @@ class JavaScriptCiler:
                 jsvariable = jsro
         parent = jsfunc.parent
         if not jsfunc.isAnonymous():
-            parent.functions.pop(funcName)
+            parent.functions.pop(funcName, None)
             parent.variables[funcName] = jsvariable
         return jsvariable
 
@@ -2579,7 +2589,9 @@ class JavaScriptCiler:
         # Add it to scope if it's not already in there
         if toScope:
             if isinstance(toScope, JSVariable):
-                if toScope.type.lower() not in ("object", ):
+                # toScope.type can be None if it's an implicitly defined scope
+                # (i.e. ones we picked up by observing properties being set on it)
+                if toScope.type is not None and toScope.type.lower() not in ("object", ):
                     # Not going to add sub-variables, as it's likely a class
                     # object already, which has this variable information set
                     #if not toScope.type:
